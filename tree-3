
import { Tree } from './../../intefaces/tree.interface';
import './format-tree'
import { GroupService } from './../../services/group.service';
import { AfterViewInit, Component, Input, OnChanges, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { NzFormatEmitEvent, NzTreeNode, NzTreeNodeOptions } from 'ng-zorro-antd/tree';
// import { formatTree } from './format-tree';
import { addTreeKey, formatTree } from './utils/tree';

@Component({
  selector: 'app-tree-group',
  templateUrl: './tree-group.component.html',
  styleUrls: ['./tree-group.component.scss']
})
export class TreeGroupComponent implements OnChanges, OnInit {
  constructor(
    private router: Router,
    private groupService: GroupService
  ) {
  }

  treeList = [
    {
      id: "299cc85d-718d-4b53-ad71-e983d42bf8be",
      created_at: "7/9/2022 04:36:05.711873",
      updated_at: "7/9/2022 04:36:05.711873",
      deleted_at: null,
      created_by: "",
      updated_by: "",
      deleted_by: "",
      code: "joy.portal-user",
      module: "user",
      title: "User service",
      type: "MODULE",
      custom_title: "",
    },
    {
      id: "ca6beb9c-f7b4-47d8-9874-6ffe0a148ecc",
      created_at: "7/9/2022 04:36:05.711873",
      updated_at: "7/9/2022 04:36:05.711873",
      deleted_at: null,
      created_by: "",
      updated_by: "",
      deleted_by: "",
      code: "joy.portal-user.member",
      module: "user",
      title: "Member",
      type: "SUB_MODULE",
      custom_title: "",
    },
    {
      id: "d9d882f6-79e4-4788-83cf-c410d67e8c62",
      created_at: "7/9/2022 04:36:05.711873",
      updated_at: "7/9/2022 04:36:05.711873",
      deleted_at: null,
      created_by: "",
      updated_by: "",
      deleted_by: "",
      code: "joy.portal-user.group",
      module: "user",
      title: "Group",
      type: "SUB_MODULE",
      custom_title: "",
    },
    {
      id: "a99810f7-3264-48c2-b2ec-eef7eaf2df12",
      created_at: "7/9/2022 04:36:05.711873",
      updated_at: "7/9/2022 04:36:05.711873",
      deleted_at: null,
      created_by: "",
      updated_by: "",
      deleted_by: "",
      code: "joy.portal-user.member.list",
      module: "user",
      title: "Member list",
      type: "SCREEN",
      custom_title: "",
    },

    {
      id: "6c7609b5-bc08-4284-9344-fa72aaff8233",
      created_at: "7/9/2022 04:36:05.711873",
      updated_at: "7/9/2022 04:36:05.711873",
      deleted_at: null,
      created_by: "",
      updated_by: "",
      deleted_by: "",
      code: "joy.portal-user.group.list",
      module: "user",
      title: "Group list",
      type: "SCREEN",
      custom_title: "",
    },
    {
      id: "59d72e23-19cb-480d-9d7e-3625569a793a",
      created_at: "7/9/2022 04:36:05.711873",
      updated_at: "7/9/2022 04:36:05.711873",
      deleted_at: null,
      created_by: "",
      updated_by: "",
      deleted_by: "",
      code: "joy.portal-user.group.detail",
      module: "user",
      title: "Group detail",
      type: "SCREEN",
      custom_title: "",
    },
  ];

  checkAll = false
  selectedKey: string = '';
  checkedKeys: Array<string> = [];
  expandKey: string | undefined = '';
  treeFortmat: any = []
  attkeyTree: Tree[] = []
  @Input() data: any = []



  ngOnChanges(): void {
    console.log(this.data);
  }

  ngOnInit(): void {
    const addKeyTree = addTreeKey(this.treeList)
    const treeFortmat = formatTree(addTreeKey(addKeyTree))

    this.treeFortmat = treeFortmat
    this.attkeyTree = addKeyTree

  }

  // handleNavigate() {
  //   const id = 123
  //   this.router.navigate(['detail-group', id])
  // }

  // nodes_expand = [
  //   {
  //     checked: false,
  //     title: 'root',
  //     key: 'root',
  //     parentCode: null,
  //     code: 'root',
  //     level: '',
  //     type: '',
  //     icon: '',
  //     openChild: ''
  //   },
  // ];

  // childrenNode = [
  //   {
  //     checked: false,
  //     title: 'User',
  //     key: 'User',
  //     parentCode: 'root',
  //     code: 'User',
  //     level: '',
  //     type: '',
  //     icon: '',
  //     openChild: ''
  //   },
  //   {
  //     checked: false,
  //     title: 'Member',
  //     key: 'Member',
  //     parentCode: 'User',
  //     code: 'Member',
  //     level: '',
  //     type: '',
  //     icon: '',
  //     openChild: ''
  //   },
  //   {
  //     checked: false,
  //     title: 'Operation',
  //     key: 'Operation',
  //     parentCode: 'User',
  //     code: 'Operation',
  //     level: '',
  //     type: '',
  //     icon: '',
  //     openChild: ''
  //   },
  //   {
  //     title: 'Get list member data',
  //     key: 'Get list member data',
  //     parentCode: 'View member',
  //     code: 'Get list member data',
  //     isLeaf: true,
  //     disableCheckbox: true,
  //     level: '',
  //     type: '',
  //     icon: '',
  //     openChild: ''
  //   },
  //   {
  //     title: 'Get group member data',
  //     key: 'Get group member data',
  //     parentCode: 'View member',
  //     code: 'Get group member data',
  //     isLeaf: true,
  //     disableCheckbox: true,
  //     level: '',
  //     type: '',
  //     icon: '',
  //     openChild: ''
  //   },
  //   {
  //     title: 'Delete member',
  //     key: 'Delete member',
  //     parentCode: 'Member',
  //     code: 'Delete member',
  //     isLeaf: true,
  //     disableCheckbox: true,
  //     level: '',
  //     type: '',
  //     icon: '',
  //     openChild: ''
  //   },
  //   {
  //     title: 'Create member',
  //     key: 'Create member',
  //     parentCode: 'Member',
  //     code: 'Create member',
  //     isLeaf: true,
  //     disableCheckbox: true,
  //     level: '',
  //     type: '',
  //     icon: '',
  //     openChild: ''
  //   },
  //   {
  //     checked: false,
  //     title: 'View member',
  //     key: 'View member',
  //     parentCode: 'Member',
  //     code: 'View member',
  //     level: '',
  //     type: '',
  //     icon: '',
  //     openChild: ''
  //   },
  //   {
  //     checked: false,
  //     title: 'View oparation',
  //     key: 'View oparation',
  //     parentCode: 'Operation',
  //     code: 'View oparation',
  //     level: '',
  //     type: '',
  //     icon: '',
  //     openChild: ''
  //   },
  //   {
  //     checked: false,
  //     title: 'Delete oparation',
  //     key: 'Delete oparation',
  //     parentCode: 'Operation',
  //     code: 'Delete oparation',
  //     isLeaf: true,
  //     disableCheckbox: true,
  //     level: '',
  //     type: '',
  //     icon: '',
  //     openChild: ''
  //   },
  //   {
  //     checked: false,
  //     title: 'Create oparation',
  //     key: 'Create oparation',
  //     parentCode: 'Operation',
  //     code: 'Create oparation',
  //     isLeaf: true,
  //     disableCheckbox: true,
  //     level: '',
  //     type: '',
  //     icon: '',
  //     openChild: ''
  //   },
  //   {
  //     title: 'Get list oparation data',
  //     key: 'Get list oparation data',
  //     parentCode: 'View oparation',
  //     code: 'Get list oparation data',
  //     isLeaf: true,
  //     disableCheckbox: true,
  //     level: '',
  //     type: '',
  //     icon: '',
  //     openChild: ''
  //   },
  //   {
  //     title: 'Get group oparation data',
  //     key: 'Get group oparation data',
  //     parentCode: 'View oparation',
  //     code: 'Get group oparation data',
  //     isLeaf: true,
  //     disableCheckbox: true,
  //     level: '',
  //     type: '',
  //     icon: '',
  //     openChild: ''
  //   },
  //   {
  //     checked: false,
  //     title: 'Dashboard',
  //     key: 'Dashboard',
  //     parentCode: 'root',
  //     code: 'Dashboard',
  //     level: '',
  //     type: '',
  //     icon: '',
  //     openChild: ''
  //   },
  //   {
  //     title: 'Dashboard 001',
  //     key: 'Dashboard 001',
  //     parentCode: 'Dashboard',
  //     code: 'Dashboard 001',
  //     isLeaf: true,
  //     disableCheckbox: true,
  //     level: '',
  //     type: '',
  //     icon: '',
  //     openChild: ''
  //   },
  //   {
  //     title: 'Dashboard 002',
  //     key: 'Dashboard 002',
  //     parentCode: 'Dashboard',
  //     code: 'Dashboard 002',
  //     isLeaf: true,
  //     disableCheckbox: true,
  //     level: '',
  //     type: '',
  //     icon: '',
  //     openChild: ''
  //   },
  //   {
  //     title: 'Dashboard 003',
  //     key: 'Dashboard 003',
  //     parentCode: 'Dashboard',
  //     code: 'Dashboard 003',
  //     isLeaf: true,
  //     disableCheckbox: true,
  //     level: '',
  //     type: '',
  //     icon: '',
  //     openChild: ''
  //   },
  // ];


  checkChild(children: any, node: any) {

    children.forEach((child: any) => {
      child.checked = node.origin.checked;

      if (child.children) {
        this.checkChild(child.children, node);
      }
    });
  }

  handleChange(e: any, node: NzTreeNode) {

    this.selectedKey = e;
    node.origin.checked = !node.origin.checked;

    if (node.children.length > 0) {

      const children = this.attkeyTree.filter(
        (item: any) => item.parentCode === this.selectedKey
      );

      if (children.length > 0) {
        //set checked or not checked same parent node
        this.checkChild(children, node);
      }
    }

    this.checkParent(node);

    const checked = this.attkeyTree.filter(tree => tree['checked'])
    const notChecked = this.attkeyTree.filter(tree => !tree['checked'])

    console.log(checked, notChecked);
    if (checked.length === 0) {
      console.log(123);

      this.checkAll = false
    }

    if (notChecked.length === 0) {
      this.checkAll = true
      console.log(456);

    }

  }

  checkParent(node: NzTreeNode) {
    //check all children is checked or not checked
    console.log(node);

    let checkedAll = node.parentNode?.children
      .filter((item) => !item.isLeaf)
      .every((child) => child.origin.checked) as boolean;
    // let parentNode = [...this.childrenNode, ...this.nodes_expand].find(
    //   (item) => item.key === node?.parentNode?.key
    // );
    let parentNode: any = this.attkeyTree.find(
      (item: any) => item.key === node?.parentNode?.key
    );

    if (parentNode) {
      parentNode.checked = checkedAll;

      if (node.parentNode) {
        this.checkParent(node.parentNode);
      }
    }
  }

  handleCheckAll() {
    this.checkAll = !this.checkAll

    this.attkeyTree.forEach(item => item['checked'] = this.checkAll)
  }

  nzEvent(event: NzFormatEmitEvent): void {
    // load child async
    if (event.eventName === 'expand') {
      const node = event.node;
      this.expandKey = node?.key;
      console.log(node);


      if (node?.getChildren().length === 0 && node?.isExpanded) {
        const code = node.origin['code']

        this.groupService.getActionByCode(code).subscribe(actions => {
          actions.data.forEach((item: any) => {
            item.parentCode = item.screen.code
            item.key = item.code
          })

          this.data.push(...actions.data)
          node.addChildren(actions.data);

        })
        // this.loadNode().then((data) => {
        //   node.addChildren(data);
        // });
      }
    }
  }

  // loadNode(): Promise<NzTreeNodeOptions[]> {
  //   return new Promise((resolve) => {
  //     const children = this.childrenNode.filter(
  //       (x) => x.parentCode === this.expandKey
  //     );

  //     setTimeout(() => resolve(children), 500);
  //   });
  // }

}

///
<div class="tree-container" style="background-color: #fff; padding: 20px">
  <div style="margin: 0 0 16px 0">
    <label
      style="cursor: pointer !important"
      nz-checkbox
      [nzValue]="checkAll"
      [ngModel]="checkAll"
      (change)="handleCheckAll()"
      >checkall</label
    >
  </div>
  <nz-tree
    [nzData]="treeFortmat"
    nzAsyncData
    (nzExpandChange)="nzEvent($event)"
    [nzTreeTemplate]="nzTreeTemplate"
  >
  </nz-tree>
  <ng-template #nzTreeTemplate let-node let-origin="origin">
    <span>
      <span *ngIf="!node.isLeaf">
        <label
          style="cursor: pointer !important"
          nz-checkbox
          nzValue="{{ node.key }}"
          nzChecked="{{ node.origin.checked || false }}"
          (change)="handleChange(node.key, node)"
        ></label>
        <span style="margin-left: 8px">{{ node.title }}</span>
      </span>
      <span *ngIf="node.isLeaf">
        <span class="file-name">{{ node.title }}</span>
      </span>
    </span>
  </ng-template>

  <!-- <button (click)="handleNavigate()">navigate</button> -->
</div>

///
import { Tree } from "../../../intefaces";

declare global {
    interface String {
        count(c: string): string | number;
    }
}

String.prototype.count = function (c: string) {
    var result = 0,
        i = 0;
    for (i; i < this.length; i++) if (this[i] == c) result++;
    return result;
};

const appendChild = (tree: Tree[], treeModule: Tree[]) => {
    treeModule.forEach((treeModuleItem: any) => {
        let children: Tree[] = [];

        tree.forEach((treeItem: Tree) => {
            if (
                treeItem.code.count(".") ===
                treeModuleItem.code?.count(".") + 1 &&
                treeItem.code.includes(treeModuleItem.code)
            ) {
                treeItem['parentCode'] = treeModuleItem.code
                children.push(treeItem);
            }
            treeModuleItem["children"] = [...children];
        });

        if (children.length > 0) {
            appendChild(tree, children);
        }
    });

    return treeModule;
};

export const formatTree = (tree: Tree[]) => {
    const treeModule = tree.filter((item: Tree) => item.type === "MODULE");

    if (treeModule.length > 0) {
        return appendChild(tree, treeModule);
    } else {
        return
    }
};


export const addTreeKey = (tree: Tree[]) => {
    let data: Tree[] = []

    tree && tree.forEach((treeItem: Tree) => {
        treeItem['key'] = treeItem.code
        treeItem['checked'] = false

        data.push(treeItem)
    })

    return data
}



